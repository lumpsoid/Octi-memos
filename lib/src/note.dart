class Note {
  /// The unique identifier for the book.
  ///
  /// If no [id] is provided, it will be autogenerated based on the current
  /// microsecond timestamp.
  final int id;
  late String body;
  late String dateCreated;
  late String dateModified;

  Note({
    int? id,
    required this.body,
    String? dateCreated,
    String? dateModified,
  }) : id = id ?? DateTime.now().microsecondsSinceEpoch {
    final DateTime dateTime = DateTime.fromMicrosecondsSinceEpoch(this.id);
    if (dateCreated == null) {
      this.dateCreated = dateTime.toIso8601String();
    }
    if (dateModified == null) {
      this.dateModified = dateTime.toIso8601String();
    }
  }

  Note.loading() : this(body: '...');

  bool get isLoading => body == '...';

  Future<void> update({required body}) async {
    this.body = body;
    dateModified = DateTime.now().toIso8601String();
  }

  Future<Map<String, dynamic>> toMap() async {
    return {
      'id': id,
      'body': body,
      'date_created': dateCreated,
      'date_modified': dateModified,
    };
  }
}