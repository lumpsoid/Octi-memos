import 'package:equatable/equatable.dart';
import 'package:fpdart/fpdart.dart';

class Note extends Equatable {
  const Note({
    required this.id,
    required this.body,
    required this.dateCreated,
    required this.dateModified,
  });

  const Note.empty()
      : this(
          id: 0,
          body: '',
          dateCreated: 0,
          dateModified: 0,
        );

  /// The unique identifier for the book.
  ///
  /// If no [id] is provided, it will be autogenerated based on the current
  /// microsecond timestamp.
  final int id;
  final String body;
  final int dateCreated;
  final int dateModified;

  bool get isEmpty => id == 0;

  @override
  List<Object?> get props => [
        id,
        body,
        dateCreated,
        dateModified,
      ];
}

Map<String, dynamic> noteToDb(Note note) {
  return {
    'id': note.id,
    'body': note.body,
    'date_created': note.dateCreated,
    'date_modified': note.dateModified,
  };
}

Note noteFromDb(Map<String, dynamic> map) {
  return Note(
    id: map['id'] as int,
    body: map['body'] as String,
    dateCreated: map['date_created'] as int,
    dateModified: map['date_modified'] as int,
  );
}

IO<Note> createNewNote(String message) => IO(
      () {
        final now = DateTime.now();
        return Note(
          id: now.microsecondsSinceEpoch,
          body: message,
          dateCreated: now.microsecondsSinceEpoch,
          dateModified: now.microsecondsSinceEpoch,
        );
      },
    );

Note updateNote(Note note, String bodyNew) {
  final now = DateTime.now();
  return Note(
    id: note.id,
    body: bodyNew,
    dateCreated: note.dateCreated,
    dateModified: now.millisecond,
  );
}
